package controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;

import dal.Dbconnect;
import algorithm.Decrypt;

public class DecDemo {
	public static void main(String[] args) throws IOException {
		
		String serverids[]=Dbconnect.getserverid("41");
		if(algorithm.Setup.setup("41",serverids[1]))
		{
			System.out.println("setup done");
		}
		
		String key = Dbconnect.getPrivateKey(serverids[1]);
		BigInteger private_key = new BigInteger(key);

		BigInteger nn=new BigInteger("18126382190984217728241504910885013395189808314340651350487332687427460638425764148729095256222182074440577734407769497806594725992906405200617990200929030872367130471625845294771084275564090504800536649098067760721318124025386203683935944905883242338841076056462523931132801797381518542651272235342269915474397644157682242224013765129704111829975507042957596846151382179129602691593577215853994877398940669279520533099226031789303666994111928841854851735976582684031726223254519006160674923668394275936484954994408292179083726069245734997903177273790559702164607951635774008286485904914887746756582201784731038763987");
	
		
			
		
		File file = new File("E:\\Enc.txt");
		FileInputStream fis = new FileInputStream(file);
		byte[] data = new byte[(int) file.length()];		
		
		fis.read(data);
		fis.close();
		String message = new String(data);
		System.out.println(message);
		
		
		//Decrypt decryptMessage = new Decrypt(serverids[1], nn,private_key);
		//String msg = decryptMessage.decryption(data);
		//System.out.println("msg"+msg);
			String b="9213169013588520683588792314836988031650998954938099239966309136589093338129638000255418740705642441200341129235887307845031311763551145487618349616777989002181799079276596048355795367128312761231466307009420702018055479165866930522186992185136705631421588731130464040101547094937019775680666999534071967997467861020137692619143424266816701120351989724938003831571030071411165810701541476873945710569520277241778573968324176731619536488575261143428071909689547956311373065816107038164996318920350256784987572016065594051216037703281369198588840589913257885347452843381094041062677670578052160895887108999409920020460";
			BigInteger bg=new BigInteger(b);
			bg.modPow(private_key, nn);
			String test=new String(b);
		
		//String test=pt.toString();
		
			System.out.println("msg"+test);
		
	}
}
